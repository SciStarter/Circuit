// This is a very slightly-modified version of the code generated by
// #[derive(sqlx::Decode)] on the Opportunity type. See issues on
// github: https://github.com/launchbadge/sqlx/issues/1031 and
// https://github.com/launchbadge/sqlx/issues/672
//
// Should be unneccesary once a fix lands for
// https://github.com/rust-lang/rust/issues/82219 or
// https://github.com/launchbadge/sqlx/issues/1031
//
// To update this:
// 1. Replace #[derive(sqlx:Encode)] with #[derive(sqlx::Type)] on Opportunity
// 2. Use cargo +nightly expand
// 3. Copy replace the expanded Decode and Type macros into this file
// 4. Comment out:
//  serde_json::Value: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
// 5. Change #[derive(sqlx::Type)] back to #[derive(sqlx::Encode)] on Opportunity

use super::*;

impl<'r> ::sqlx::decode::Decode<'r, ::sqlx::Postgres> for super::Opportunity
where
    Option<i32>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<i32>: ::sqlx::types::Type<::sqlx::Postgres>,
    Uuid: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Uuid: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    Option<OffsetDateTime>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<OffsetDateTime>: ::sqlx::types::Type<::sqlx::Postgres>,
    Option<OffsetDateTime>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<OffsetDateTime>: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    OrganizationType: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    OrganizationType: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    EntityType: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    EntityType: ::sqlx::types::Type<::sqlx::Postgres>,
    i16: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    i16: ::sqlx::types::Type<::sqlx::Postgres>,
    i16: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    i16: ::sqlx::types::Type<::sqlx::Postgres>,
    Domain: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Domain: ::sqlx::types::Type<::sqlx::Postgres>,
    Vec<String>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Vec<String>: ::sqlx::types::Type<::sqlx::Postgres>,
    bool: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    bool: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    Vec<OffsetDateTime>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Vec<OffsetDateTime>: ::sqlx::types::Type<::sqlx::Postgres>,
    bool: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    bool: ::sqlx::types::Type<::sqlx::Postgres>,
    Vec<OffsetDateTime>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Vec<OffsetDateTime>: ::sqlx::types::Type<::sqlx::Postgres>,
    Option<OpenDays>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<OpenDays>: ::sqlx::types::Type<::sqlx::Postgres>,
    Cost: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Cost: ::sqlx::types::Type<::sqlx::Postgres>,
    Vec<String>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Vec<String>: ::sqlx::types::Type<::sqlx::Postgres>,
    bool: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    bool: ::sqlx::types::Type<::sqlx::Postgres>,
    LocationType: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    LocationType: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    Option<serde_json::Value>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<serde_json::Value>: ::sqlx::types::Type<::sqlx::Postgres>,
    Option<serde_json::Value>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Option<serde_json::Value>: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    String: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    String: ::sqlx::types::Type<::sqlx::Postgres>,
    Vec<String>: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    Vec<String>: ::sqlx::types::Type<::sqlx::Postgres>,
    //serde_json::Value: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    serde_json::Value: ::sqlx::types::Type<::sqlx::Postgres>,
    //serde_json::Value: ::sqlx::decode::Decode<'r, ::sqlx::Postgres>,
    serde_json::Value: ::sqlx::types::Type<::sqlx::Postgres>,
{
    fn decode(
        value: ::sqlx::postgres::PgValueRef<'r>,
    ) -> ::std::result::Result<
        Self,
        ::std::boxed::Box<
            dyn ::std::error::Error + 'static + ::std::marker::Send + ::std::marker::Sync,
        >,
    > {
        let mut decoder = ::sqlx::postgres::types::PgRecordDecoder::new(value)?;
        let id = decoder.try_decode::<Option<i32>>()?;
        let partner_uid = decoder.try_decode::<Uuid>()?;
        let partner_name = decoder.try_decode::<String>()?;
        let partner_created = decoder.try_decode::<Option<OffsetDateTime>>()?;
        let partner_updated = decoder.try_decode::<Option<OffsetDateTime>>()?;
        let partner_opp_url = decoder.try_decode::<String>()?;
        let organization_name = decoder.try_decode::<String>()?;
        let organization_type = decoder.try_decode::<OrganizationType>()?;
        let organization_website = decoder.try_decode::<String>()?;
        let entity_type = decoder.try_decode::<EntityType>()?;
        let min_age = decoder.try_decode::<i16>()?;
        let max_age = decoder.try_decode::<i16>()?;
        let pes_domain = decoder.try_decode::<Domain>()?;
        let tags = decoder.try_decode::<Vec<String>>()?;
        let ticket_required = decoder.try_decode::<bool>()?;
        let title = decoder.try_decode::<String>()?;
        let description = decoder.try_decode::<String>()?;
        let image_url = decoder.try_decode::<String>()?;
        let start_dates = decoder.try_decode::<Vec<OffsetDateTime>>()?;
        let has_end = decoder.try_decode::<bool>()?;
        let end_dates = decoder.try_decode::<Vec<OffsetDateTime>>()?;
        let attraction_hours = decoder.try_decode::<Option<OpenDays>>()?;
        let cost = decoder.try_decode::<Cost>()?;
        let languages = decoder.try_decode::<Vec<String>>()?;
        let is_online = decoder.try_decode::<bool>()?;
        let location_type = decoder.try_decode::<LocationType>()?;
        let location_name = decoder.try_decode::<String>()?;
        let location_point = decoder.try_decode::<Option<serde_json::Value>>()?;
        let location_polygon = decoder.try_decode::<Option<serde_json::Value>>()?;
        let address_street = decoder.try_decode::<String>()?;
        let address_city = decoder.try_decode::<String>()?;
        let address_state = decoder.try_decode::<String>()?;
        let address_country = decoder.try_decode::<String>()?;
        let address_zip = decoder.try_decode::<String>()?;
        let contact_name = decoder.try_decode::<String>()?;
        let contact_email = decoder.try_decode::<String>()?;
        let contact_phone = decoder.try_decode::<String>()?;
        let opp_hashtags = decoder.try_decode::<Vec<String>>()?;
        let opp_social_handles = decoder.try_decode::<serde_json::Value>()?;
        let extra_data = decoder.try_decode::<serde_json::Value>()?;
        ::std::result::Result::Ok(Opportunity {
            id,
            partner_uid,
            partner_name,
            partner_created,
            partner_updated,
            partner_opp_url,
            organization_name,
            organization_type,
            organization_website,
            entity_type,
            min_age,
            max_age,
            pes_domain,
            tags,
            ticket_required,
            title,
            description,
            image_url,
            start_dates,
            has_end,
            end_dates,
            attraction_hours,
            cost,
            languages,
            is_online,
            location_type,
            location_name,
            location_point,
            location_polygon,
            address_street,
            address_city,
            address_state,
            address_country,
            address_zip,
            contact_name,
            contact_email,
            contact_phone,
            opp_hashtags,
            opp_social_handles,
            extra_data,
        })
    }
}

impl ::sqlx::Type<::sqlx::Postgres> for Opportunity {
    fn type_info() -> ::sqlx::postgres::PgTypeInfo {
        ::sqlx::postgres::PgTypeInfo::with_name("Opportunity")
    }
}
